import * as Rx from "rxjs";
import * as A from "./atom";
export declare type NativeProperty<T> = Rx.Observable<T>;
export declare type NativeAtom<T> = A.Atom<T>;
export declare type NativeEventStream<T> = Rx.Observable<T>;
export declare type Scope = {};
export declare type Predicate<A> = (value: A) => boolean;
export declare type Observable<T> = {};
export declare type Atom<T> = {};
export declare type Property<T> = {};
export declare type EventStream<T> = {};
export interface Bus<T> extends NativeEventStream<T> {
}
export declare type Unsub = () => void;
export declare function bus<T>(): Bus<T>;
export declare function pushAndEnd<T>(bus: Bus<T>, value: T): void;
export declare function get<A>(prop: Property<A>): A;
export declare function set<A>(atom: Atom<A>, value: A): void;
export declare function isProperty(x: any): x is Property<any>;
export declare function forEach<V>(x: Observable<V>, fn: (value: V) => void): Unsub;
export declare function view<A, K extends keyof A>(a: Atom<A>, key: number): Atom<A[K] | undefined>;
export declare function view<A, K extends keyof A>(a: Property<A>, key: number): Property<A[K] | undefined>;
export declare function filter<A>(a: Atom<A>, fn: Predicate<A>): Atom<A>;
export declare function filter<A>(a: Property<A>, fn: Predicate<A>): Property<A>;
export declare const valueMissing: {};
export declare type ValueMissing = typeof valueMissing;
export declare function _forEach<V>(x: Rx.Observable<V>, fn: (value: V) => void): Unsub;
export declare function getCurrentValue<A>(observable: Rx.Observable<A>): A;
export declare const observablesThrowError = false;
export declare const observablesImplementationName = "RxJs";
